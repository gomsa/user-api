// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/casbin/casbin.proto

package casbin

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Permission struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Method               string   `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Permission) Reset()         { *m = Permission{} }
func (m *Permission) String() string { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()    {}
func (*Permission) Descriptor() ([]byte, []int) {
	return fileDescriptor_f835afd114115d9e, []int{0}
}

func (m *Permission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permission.Unmarshal(m, b)
}
func (m *Permission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permission.Marshal(b, m, deterministic)
}
func (m *Permission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission.Merge(m, src)
}
func (m *Permission) XXX_Size() int {
	return xxx_messageInfo_Permission.Size(m)
}
func (m *Permission) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission.DiscardUnknown(m)
}

var xxx_messageInfo_Permission proto.InternalMessageInfo

func (m *Permission) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Permission) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

type Request struct {
	Label                string        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Role                 string        `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Roles                []string      `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	Permission           *Permission   `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"`
	Permissions          []*Permission `protobuf:"bytes,5,rep,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f835afd114115d9e, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Request) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Request) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Request) GetPermission() *Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

func (m *Request) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type Response struct {
	Valid                bool          `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Label                string        `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Role                 string        `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Roles                []string      `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
	Permission           *Permission   `protobuf:"bytes,5,opt,name=permission,proto3" json:"permission,omitempty"`
	Permissions          []*Permission `protobuf:"bytes,6,rep,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_f835afd114115d9e, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Response) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Response) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Response) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Response) GetPermission() *Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

func (m *Response) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func init() {
	proto.RegisterType((*Permission)(nil), "casbin.Permission")
	proto.RegisterType((*Request)(nil), "casbin.Request")
	proto.RegisterType((*Response)(nil), "casbin.Response")
}

func init() { proto.RegisterFile("proto/casbin/casbin.proto", fileDescriptor_f835afd114115d9e) }

var fileDescriptor_f835afd114115d9e = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6a, 0xb3, 0x40,
	0x14, 0x86, 0x3f, 0x63, 0xfc, 0xf9, 0x8e, 0xf4, 0x6f, 0x28, 0x65, 0xda, 0x95, 0xb8, 0xca, 0xca,
	0x80, 0x4d, 0xa1, 0xab, 0x42, 0x68, 0x21, 0xdb, 0x32, 0xd0, 0x0b, 0xd0, 0xcc, 0x81, 0x0a, 0xc6,
	0xb1, 0xce, 0x34, 0x17, 0xd6, 0xde, 0x45, 0xaf, 0xaa, 0x38, 0x33, 0xa9, 0x2e, 0x12, 0x30, 0x59,
	0x8d, 0xef, 0xf8, 0x3e, 0x70, 0x1e, 0x0f, 0xc2, 0x6d, 0xd3, 0x0a, 0x25, 0xe6, 0xeb, 0x5c, 0x16,
	0x65, 0x6d, 0x8f, 0x54, 0xdf, 0x11, 0xdf, 0xa4, 0xe4, 0x09, 0xe0, 0x15, 0xdb, 0x4d, 0x29, 0x65,
	0x29, 0x6a, 0x42, 0x21, 0x90, 0xd8, 0x6e, 0xcb, 0x35, 0x52, 0x27, 0x76, 0x66, 0xff, 0xd9, 0x2e,
	0x92, 0x1b, 0xf0, 0x37, 0xa8, 0xde, 0x05, 0xa7, 0x13, 0xfd, 0xc2, 0xa6, 0xe4, 0xdb, 0x81, 0x80,
	0xe1, 0xc7, 0x27, 0x4a, 0x45, 0xae, 0xc1, 0xab, 0xf2, 0x02, 0x2b, 0xcb, 0x9a, 0x40, 0x08, 0x4c,
	0x5b, 0x51, 0xa1, 0xe5, 0xf4, 0x73, 0xd7, 0xec, 0x4e, 0x49, 0xdd, 0xd8, 0xed, 0x9a, 0x3a, 0x90,
	0x0c, 0xa0, 0xf9, 0x9b, 0x85, 0x4e, 0x63, 0x67, 0x16, 0x65, 0x24, 0xb5, 0x63, 0xf7, 0x53, 0xb2,
	0x41, 0x8b, 0x2c, 0x20, 0xea, 0x93, 0xa4, 0x5e, 0xec, 0x1e, 0x80, 0x86, 0xb5, 0xe4, 0xc7, 0x81,
	0x90, 0xa1, 0x6c, 0x44, 0x2d, 0xf5, 0x30, 0xdb, 0xbc, 0x2a, 0xb9, 0x1e, 0x3b, 0x64, 0x26, 0xf4,
	0x32, 0x93, 0x7d, 0x32, 0xee, 0x3e, 0x99, 0xe9, 0x61, 0x19, 0xef, 0x14, 0x19, 0x7f, 0x94, 0x4c,
	0xf6, 0xe5, 0x82, 0xff, 0xac, 0x2b, 0x64, 0x01, 0x67, 0x4b, 0xce, 0x07, 0x0b, 0xbd, 0xd8, 0xc1,
	0x76, 0x47, 0x77, 0x97, 0xfd, 0x85, 0xd1, 0x4f, 0xfe, 0x91, 0x47, 0xb8, 0x7a, 0xc1, 0x0a, 0x15,
	0xf6, 0xa0, 0x1c, 0x4d, 0xbe, 0x35, 0x3c, 0x3f, 0x81, 0x7c, 0x80, 0xf3, 0x15, 0xaa, 0xa3, 0xb1,
	0x14, 0x82, 0x25, 0xe7, 0xac, 0xfb, 0xec, 0xa3, 0xfa, 0x19, 0x44, 0x46, 0x8d, 0xe9, 0xa5, 0x8c,
	0x65, 0x8c, 0xd4, 0x11, 0xcc, 0x1c, 0xc2, 0x15, 0xaa, 0xf1, 0x40, 0xe1, 0xeb, 0xdf, 0xf0, 0xfe,
	0x37, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xff, 0xf4, 0xac, 0xa3, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Casbin service

type CasbinClient interface {
	// 角色权限管理
	AddPermission(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeletePermissions(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdatePermissions(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetPermissions(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 用户角色管理
	AddRole(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type casbinClient struct {
	c           client.Client
	serviceName string
}

func NewCasbinClient(serviceName string, c client.Client) CasbinClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "casbin"
	}
	return &casbinClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *casbinClient) AddPermission(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Casbin.AddPermission", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) DeletePermissions(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Casbin.DeletePermissions", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) UpdatePermissions(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Casbin.UpdatePermissions", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetPermissions(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Casbin.GetPermissions", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddRole(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Casbin.AddRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) DeleteRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Casbin.DeleteRoles", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) UpdateRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Casbin.UpdateRoles", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Casbin.GetRoles", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Casbin service

type CasbinHandler interface {
	// 角色权限管理
	AddPermission(context.Context, *Request, *Response) error
	DeletePermissions(context.Context, *Request, *Response) error
	UpdatePermissions(context.Context, *Request, *Response) error
	GetPermissions(context.Context, *Request, *Response) error
	// 用户角色管理
	AddRole(context.Context, *Request, *Response) error
	DeleteRoles(context.Context, *Request, *Response) error
	UpdateRoles(context.Context, *Request, *Response) error
	GetRoles(context.Context, *Request, *Response) error
}

func RegisterCasbinHandler(s server.Server, hdlr CasbinHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Casbin{hdlr}, opts...))
}

type Casbin struct {
	CasbinHandler
}

func (h *Casbin) AddPermission(ctx context.Context, in *Request, out *Response) error {
	return h.CasbinHandler.AddPermission(ctx, in, out)
}

func (h *Casbin) DeletePermissions(ctx context.Context, in *Request, out *Response) error {
	return h.CasbinHandler.DeletePermissions(ctx, in, out)
}

func (h *Casbin) UpdatePermissions(ctx context.Context, in *Request, out *Response) error {
	return h.CasbinHandler.UpdatePermissions(ctx, in, out)
}

func (h *Casbin) GetPermissions(ctx context.Context, in *Request, out *Response) error {
	return h.CasbinHandler.GetPermissions(ctx, in, out)
}

func (h *Casbin) AddRole(ctx context.Context, in *Request, out *Response) error {
	return h.CasbinHandler.AddRole(ctx, in, out)
}

func (h *Casbin) DeleteRoles(ctx context.Context, in *Request, out *Response) error {
	return h.CasbinHandler.DeleteRoles(ctx, in, out)
}

func (h *Casbin) UpdateRoles(ctx context.Context, in *Request, out *Response) error {
	return h.CasbinHandler.UpdateRoles(ctx, in, out)
}

func (h *Casbin) GetRoles(ctx context.Context, in *Request, out *Response) error {
	return h.CasbinHandler.GetRoles(ctx, in, out)
}
