// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/permission/permission.proto

package permission

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Permissions service

type PermissionsService interface {
	// 权限验证授权
	// 全部权限
	All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 获取权限列表
	List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 根据 唯一 获取权限
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 创建权限
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 更新权限
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 删除权限
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 微服务内部调用
	// 同步
	UpdateOrCreate(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type permissionsService struct {
	c    client.Client
	name string
}

func NewPermissionsService(name string, c client.Client) PermissionsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "permission"
	}
	return &permissionsService{
		c:    c,
		name: name,
	}
}

func (c *permissionsService) All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permissions.All", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permissions.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permissions.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permissions.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permissions.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permissions.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) UpdateOrCreate(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permissions.UpdateOrCreate", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Permissions service

type PermissionsHandler interface {
	// 权限验证授权
	// 全部权限
	All(context.Context, *Request, *Response) error
	// 获取权限列表
	List(context.Context, *Request, *Response) error
	// 根据 唯一 获取权限
	Get(context.Context, *Request, *Response) error
	// 创建权限
	Create(context.Context, *Request, *Response) error
	// 更新权限
	Update(context.Context, *Request, *Response) error
	// 删除权限
	Delete(context.Context, *Request, *Response) error
	// 微服务内部调用
	// 同步
	UpdateOrCreate(context.Context, *Request, *Response) error
}

func RegisterPermissionsHandler(s server.Server, hdlr PermissionsHandler, opts ...server.HandlerOption) error {
	type permissions interface {
		All(ctx context.Context, in *Request, out *Response) error
		List(ctx context.Context, in *Request, out *Response) error
		Get(ctx context.Context, in *Request, out *Response) error
		Create(ctx context.Context, in *Request, out *Response) error
		Update(ctx context.Context, in *Request, out *Response) error
		Delete(ctx context.Context, in *Request, out *Response) error
		UpdateOrCreate(ctx context.Context, in *Request, out *Response) error
	}
	type Permissions struct {
		permissions
	}
	h := &permissionsHandler{hdlr}
	return s.Handle(s.NewHandler(&Permissions{h}, opts...))
}

type permissionsHandler struct {
	PermissionsHandler
}

func (h *permissionsHandler) All(ctx context.Context, in *Request, out *Response) error {
	return h.PermissionsHandler.All(ctx, in, out)
}

func (h *permissionsHandler) List(ctx context.Context, in *Request, out *Response) error {
	return h.PermissionsHandler.List(ctx, in, out)
}

func (h *permissionsHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.PermissionsHandler.Get(ctx, in, out)
}

func (h *permissionsHandler) Create(ctx context.Context, in *Request, out *Response) error {
	return h.PermissionsHandler.Create(ctx, in, out)
}

func (h *permissionsHandler) Update(ctx context.Context, in *Request, out *Response) error {
	return h.PermissionsHandler.Update(ctx, in, out)
}

func (h *permissionsHandler) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.PermissionsHandler.Delete(ctx, in, out)
}

func (h *permissionsHandler) UpdateOrCreate(ctx context.Context, in *Request, out *Response) error {
	return h.PermissionsHandler.UpdateOrCreate(ctx, in, out)
}
